{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Factory Orchestrator Factory Orchestrator provides a simple and reliable way to run and manage factory line validation and fault analysis workflows. Beyond the factory floor Factory Orchestrator can be during os and hardware development to support various developer inner-loop and diagnostics activities. Factory Orchestrator consists of two components: A system service (FactoryOrchestratorService.exe): The service tracks task information, including run unique per-run results and logging; even persisting task state to allow the service to be resilient to data loss due to client failure. A UWP app: Communicates with the service to run executable tasks and commands on a device under test (DUT). This app can communicate with the service running on the same device and/or over a network. Tasks are used to capture actions that the server can executre, and TaskLists are used to organize and manage these Tasks. Learn more about Tasks and Tasklists Getting started with Factory Orchestrator Factory Orchestrator logs By default, the Factory Orchestrator Service generates log files in the following location on the test device: %ProgramData%\\FactoryOrchestrator . Factory Orchestrator Service log file The service log file contains details about the operation of the Factory Orchestrator Service. It is always found at %ProgramData%\\FactoryOrchestrator\\FactoryOrchestratorService.log on a device. Inspect this log for details about the service's operation. Factory Orchestrator Task log files The Task log files contain details about the execution of a specific of the Factory Orchestrator Task. There is one log file generated for each run of a Task. The files are saved to %ProgramData%\\FactoryOrchestrator\\Logs\\ on a device by default, but this location can be changed using the FactoryOrchestratorClient.SetLogFolder() API. Use the FactoryOrchestratorClient.GetLogFolder() API to programmatically retrieve the log folder.","title":"Overview"},{"location":"#factory-orchestrator","text":"Factory Orchestrator provides a simple and reliable way to run and manage factory line validation and fault analysis workflows. Beyond the factory floor Factory Orchestrator can be during os and hardware development to support various developer inner-loop and diagnostics activities. Factory Orchestrator consists of two components: A system service (FactoryOrchestratorService.exe): The service tracks task information, including run unique per-run results and logging; even persisting task state to allow the service to be resilient to data loss due to client failure. A UWP app: Communicates with the service to run executable tasks and commands on a device under test (DUT). This app can communicate with the service running on the same device and/or over a network. Tasks are used to capture actions that the server can executre, and TaskLists are used to organize and manage these Tasks. Learn more about Tasks and Tasklists Getting started with Factory Orchestrator","title":"Factory Orchestrator"},{"location":"#factory-orchestrator-logs","text":"By default, the Factory Orchestrator Service generates log files in the following location on the test device: %ProgramData%\\FactoryOrchestrator .","title":"Factory Orchestrator logs"},{"location":"#factory-orchestrator-service-log-file","text":"The service log file contains details about the operation of the Factory Orchestrator Service. It is always found at %ProgramData%\\FactoryOrchestrator\\FactoryOrchestratorService.log on a device. Inspect this log for details about the service's operation.","title":"Factory Orchestrator Service log file"},{"location":"#factory-orchestrator-task-log-files","text":"The Task log files contain details about the execution of a specific of the Factory Orchestrator Task. There is one log file generated for each run of a Task. The files are saved to %ProgramData%\\FactoryOrchestrator\\Logs\\ on a device by default, but this location can be changed using the FactoryOrchestratorClient.SetLogFolder() API. Use the FactoryOrchestratorClient.GetLogFolder() API to programmatically retrieve the log folder.","title":"Factory Orchestrator Task log files"},{"location":"factory-orchestrator-utilities/","text":"Factory Orchestrator utilities In addition to providing a graphical interface to create, manage, and run Tasks and TaskLists. The Factory Orchestrator app also includes some basic utilities intended as a starting point for integration into a manufacturing line, fault analysis workflow or developer inner loop. Command Prompt A basic, non-interactive, command prompt that allows you to troubleshoot without having use other methods like SSH or Windows Device Portal to connect to your DUT. While you can run commands and see output when using the built-in command prompt in Factory Orchestrator, it's not an interactive shell. If you run a command that requires additional input, you won't be able to enter the additional input. (very) basic File Transfer A basic file transfer function that enables you to transfer files to and from your device when you're connected from a technician PC. This feature is not visible in the Factory Orchestrator app when run the app and service on the same device. One-time setup (Windows 10 only) First, install the Factory Orchestrator app on a Windows 10 system: PowerShell Add-AppxPackage -path \"FactoryOrchestrator\\Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe.msixbundle\" -DependencyPath \"frameworks\\Microsoft.NET.CoreFramework.x64.Debug.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.NET.CoreRuntime.x64.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.VCLibs.x64.14.00.appx\" Next, you need to give the Factory Orchestrator app full file system access for file transfer to work. Follow the directions on the Windows 10 file system access and privacy page to give Factory Orchestrator access to the file system. You may need to launch the app at least once before it appears on the Settings app. Send file to a DUT From your Windows 10 device, launch Factory Orchestrator and connect to the IP address of the DUT. In the \"Client File\" textbox, enter the full path to a file on your Windows 10 device. In the \"Server File\" textbox, enter the full path of where you wish the file to be saved on the DUT. Make sure the location you're saving to is writeable. Click \"Send Client File to Server\" to transfer the file from the Windows 10 device to the device. Receive file from your device device From your Windows 10 technician PC, launch Factory Orchestrator and connect to the IP address of the DUT. In the \"Server File\" textbox, enter the full path to a file on the DUT. In the \"Client File\" textbox, enter the full path to where you wish the file to be saved on the Windows 10 device. Click \"Save Server File to Client\" to transfer the file to the DUT.","title":"Built-In Utilities"},{"location":"factory-orchestrator-utilities/#factory-orchestrator-utilities","text":"In addition to providing a graphical interface to create, manage, and run Tasks and TaskLists. The Factory Orchestrator app also includes some basic utilities intended as a starting point for integration into a manufacturing line, fault analysis workflow or developer inner loop.","title":"Factory Orchestrator utilities"},{"location":"factory-orchestrator-utilities/#command-prompt","text":"A basic, non-interactive, command prompt that allows you to troubleshoot without having use other methods like SSH or Windows Device Portal to connect to your DUT. While you can run commands and see output when using the built-in command prompt in Factory Orchestrator, it's not an interactive shell. If you run a command that requires additional input, you won't be able to enter the additional input.","title":"Command Prompt"},{"location":"factory-orchestrator-utilities/#very-basic-file-transfer","text":"A basic file transfer function that enables you to transfer files to and from your device when you're connected from a technician PC. This feature is not visible in the Factory Orchestrator app when run the app and service on the same device.","title":"(very) basic File Transfer"},{"location":"factory-orchestrator-utilities/#one-time-setup-windows-10-only","text":"First, install the Factory Orchestrator app on a Windows 10 system: PowerShell Add-AppxPackage -path \"FactoryOrchestrator\\Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe.msixbundle\" -DependencyPath \"frameworks\\Microsoft.NET.CoreFramework.x64.Debug.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.NET.CoreRuntime.x64.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.VCLibs.x64.14.00.appx\" Next, you need to give the Factory Orchestrator app full file system access for file transfer to work. Follow the directions on the Windows 10 file system access and privacy page to give Factory Orchestrator access to the file system. You may need to launch the app at least once before it appears on the Settings app.","title":"One-time setup (Windows 10 only)"},{"location":"factory-orchestrator-utilities/#send-file-to-a-dut","text":"From your Windows 10 device, launch Factory Orchestrator and connect to the IP address of the DUT. In the \"Client File\" textbox, enter the full path to a file on your Windows 10 device. In the \"Server File\" textbox, enter the full path of where you wish the file to be saved on the DUT. Make sure the location you're saving to is writeable. Click \"Send Client File to Server\" to transfer the file from the Windows 10 device to the device.","title":"Send file to a DUT"},{"location":"factory-orchestrator-utilities/#receive-file-from-your-device-device","text":"From your Windows 10 technician PC, launch Factory Orchestrator and connect to the IP address of the DUT. In the \"Server File\" textbox, enter the full path to a file on the DUT. In the \"Client File\" textbox, enter the full path to where you wish the file to be saved on the Windows 10 device. Click \"Save Server File to Client\" to transfer the file to the DUT.","title":"Receive file from your device device"},{"location":"get-started-with-factory-orchestrator/","text":"Get Started with Factory Orchestrator Install the service The Factory Orchestrator service (FactoryOrchestratorService.exe) runs on your Device under Test and acts as the engine powering Factory Orchestrator. You can connect to the Factory Orchestrator service from a remote technician PC, or from the device itself. User PowerShell to install the Factory Orchestrator on your device: ## Optionally set it's start up to automatic with: -StartupType Automatic New-Service -Name \"FactoryOrchestrator\" -BinaryPathName \"FactoryOrchestratorService.exe\" Start-Service -Name \"FactoryOrchestrator\" To connect to the service, you can use the Factory Orchestrator UWP app, or interact with the service programattically using the Factory Orchestrator client APIs. Install the app You can install the Factory Orchestrator app on your DUT or on a technician PC. To install the app: On your technician PC, open an administrative Command prompt. Use Powershell to install the app and its dependencies . PowerShell Add-AppxPackage -path \"FactoryOrchestrator\\Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe.msixbundle\" -DependencyPath \"frameworks\\Microsoft.NET.CoreFramework.x64.Debug.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.NET.CoreRuntime.x64.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.VCLibs.x64.14.00.appx\" Run Factory Orchestrator Default behavior [!Important] Need instructions on how to configure a device to run FO automatically If the app isn't configured to run automatically To run the Factory Orchestrator app: Connect to the Windows Core device with Device Portal From Device Portal's Apps manager tab, choose Factory Orchestrator (App) from the Installed Apps list. Click Start The Factory Orchestrator app will start on the DUT. The Factory Orchestrator service is always running.","title":"Get Started"},{"location":"get-started-with-factory-orchestrator/#get-started-with-factory-orchestrator","text":"","title":"Get Started with Factory Orchestrator"},{"location":"get-started-with-factory-orchestrator/#install-the-service","text":"The Factory Orchestrator service (FactoryOrchestratorService.exe) runs on your Device under Test and acts as the engine powering Factory Orchestrator. You can connect to the Factory Orchestrator service from a remote technician PC, or from the device itself. User PowerShell to install the Factory Orchestrator on your device: ## Optionally set it's start up to automatic with: -StartupType Automatic New-Service -Name \"FactoryOrchestrator\" -BinaryPathName \"FactoryOrchestratorService.exe\" Start-Service -Name \"FactoryOrchestrator\" To connect to the service, you can use the Factory Orchestrator UWP app, or interact with the service programattically using the Factory Orchestrator client APIs.","title":"Install the service"},{"location":"get-started-with-factory-orchestrator/#install-the-app","text":"You can install the Factory Orchestrator app on your DUT or on a technician PC. To install the app: On your technician PC, open an administrative Command prompt. Use Powershell to install the app and its dependencies . PowerShell Add-AppxPackage -path \"FactoryOrchestrator\\Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe.msixbundle\" -DependencyPath \"frameworks\\Microsoft.NET.CoreFramework.x64.Debug.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.NET.CoreRuntime.x64.2.2.appx\" -DependencyPath \"frameworks\\Microsoft.VCLibs.x64.14.00.appx\"","title":"Install the app"},{"location":"get-started-with-factory-orchestrator/#run-factory-orchestrator","text":"","title":"Run Factory Orchestrator"},{"location":"get-started-with-factory-orchestrator/#default-behavior","text":"[!Important] Need instructions on how to configure a device to run FO automatically","title":"Default behavior"},{"location":"get-started-with-factory-orchestrator/#if-the-app-isnt-configured-to-run-automatically","text":"To run the Factory Orchestrator app: Connect to the Windows Core device with Device Portal From Device Portal's Apps manager tab, choose Factory Orchestrator (App) from the Installed Apps list. Click Start The Factory Orchestrator app will start on the DUT. The Factory Orchestrator service is always running.","title":"If the app isn't configured to run automatically"},{"location":"tasks-and-tasklists/","text":"Tasks and TasksLists Factory Orchestrator uses Tasks to capture a single action. Tasks can be executables, TAEF tests, UWP apps, or external tasks. TasksLists are used to order and group Tasks. Tasks in a TaskList can be configured run in series, parallel, or in the background. Factory Orchestrator tasks Task types Factory Orchestrator TaskLists allow adding different types of tasks: Executable These tasks are .exe files which are run directly. When you add this type of task, you can specify additional arguments and if the task should run as a background task. Batch File These tasks are .bat or .cmd files which are run by the command prompt (cmd.exe). When you add this type of task, you can specify additional arguments and if the task should run as a background task. PowerShell These tasks are .ps1 files which are run by PowerShell Core (pwsh.exe). When you add this type of task, you can specify additional arguments and if the task should run as a background task. Requires the WCOS_POWERSHELLCORE feature is included in your OEMInput.xml file. TAEF TAEF tests can be added to a TaskList, and you can specify arguments and if the task should run as a background task. UWP App Allows you to run a UWP app as a task. UWP apps cannot take arguments (though you can use arguments to pass info to the operator about the goal of the Task), nor can they automatically return a pass/fail result. Instead, the operator must manually specify if the app passed or failed via a result prompt that the Factory Orchestrator App launches when the UWP app exits. You can also exit apps via ALT+F4 or Windows Device Portal. The Factory Orchestrator service can launch apps even if the Factory Orchestrator app isn't running. UWP App tasks will only run on DUTs booted into an environment that supports UWP apps. External These are tasks that require interaction from a technician before completing. These types of tasks could be used to tell a technician to connect a cable, check a device for scratches, move the device to the next station, etc. External Tasks can't automatically return a pass/fail result. The operator must manually specify if the Task passed or failed via a result prompt that the Factory Orchestrator App launches when the Task executes. External tasks will only run on devices that support displaying graphics. Devices configured to boot into a console that can't display graphics won't display external tasks. The operator must manually specify if the app passed or failed via a result prompt that the Factory Orchestrator App launches when the app exits, like is shown on this screen: External tasks also support displaying custom images or video as part of the task. These images and videos are intended to allow external tasks to convey more information to technicians on the factory floor. When you create an external task, use Arguments to let the operator know what to expect or what actions to take. When you create an external task, use the Image or Video Path: field to specify an image or a video. Background tasks A BackgroundTask is a type of Task which is not expected to return a pass/fail result. Instead, BackgroundTasks are started before any Tasks defined in the TaskList, and are not tracked by the Factory Orchestrator Service, though their output is logged to a file. BackgroundTasks are intended to be used for logging/monitoring tasks that need to be running before any Task in the TaskList executes. BackgroundTasks are defined the exactly the same as a normal Task with the following exceptions: BackgroundTasks can only be an Executable, PowerShell, or BatchFile Task BackgroundTasks cannot have Timeout or MaxNumberOfRetries set When editing a task from the Factory Orchestrator app, you can choose the option of making the task a background task by choosing the \"Add as background task?\" option. Once you've run a task, the Factory Orchestrator service creates a TaskRun that is the output and results of the task, as well as other details about the task such as runtime. Author and manage Factory Orchestrator TaskLists You can define a collection of tasks in a TaskList . Tasks in a TaskList are run in a defined order, and can be a mixture that includes any type of tasks that's supported by Factory Orchestrator. TaskList data persists through reboots. TaskList data is stored and maintained by the Factory Orchestrator service, and doesn't depend on the app being open or running. Factory Orchestrator uses XML files to define TaskLists and their associated Tasks. An XML file can contain one or more TaskLists, each with any number of Tasks. The XML can either be hand-authored; or authored, imported, and/or exported using the Factory Orchestrator app's \"Manage TaskLists\" section. You can get started with Factory Orchestrator by using the Manage TaskLists screen in the Factory Orchestrator app to create a TaskList. TaskLists allow you to create collections of tasks that you use to validate your hardware. The Factory Orchestrator app also allows you to export TaskLists for use on other systems. See Managing TaskLists below. Managing TaskLists Use the Factory Orchestrator app to manage a TaskList. TaskLists can be made up from a combination of the different task types. You can choose whether the tasks in the TaskList will be run one-at-a-time (series), or in parallel. When you run Factory Orchestrator, you're presented with the 'Run TaskLists' tab. If you're opening the app for the first time, the app won't show any TaskLists. Once you create a TaskList, it will show on this screen. Factory Orchestrator supports using environment variables (ex: %ProgramData%) in all commands. To create, modify, and delete TaskLists, click on 'Manage TaskLists'. Create and manage TaskLists The 'Manage TaskLists' tab in the Factory Orchestrator app allows you to create, modify, and delete TaskLists. Create or import TaskLists Add a whole folder as a TaskList Adds the contents of a local folder into a new TaskList. After you've added a folder, you can edit individual tasks to configure additional arguments, timeout settings, etc. Choose individual files to add to a TaskList Use Create new TaskList to create a new TaskList where you can individual tasks one-at-a-time to your TaskList. When you add tasks this way, you choose the type of task that you're adding and can configure arguments, timeout settings, etc as you add tasks. Import a previously generated TaskLists XML file This enables you to generate and export a TaskList on one device, and import it into your device. Once loaded, imported TaskList XML files can be modified like any other Task List. To import a TaskList: On the Manage TaskLists page, click on Import FactoryOrchestratorXML file Enter the full path to the FactoryOrchestratorXML you want to import and click \u2713 When you import a TaskList: All the TaskLists defined in the file are imported If the TaskList(s) were previously run, the TaskList state is also imported but not Task run results When you create a new TaskList, the Factory Orchestrator app generates a GUID that it assigns as the TaskList's name. Create and modify TaskLists Once you've added tasks to a TaskList, you can click the pencil icon to modify as TaskList. When you click the pencil icon, you'll see the following screen: This screen allows you to create new Tasks, rename existing Tasks, reorder Tasks, or edit Tasks. Use the \"New <TaskType> Task\" buttons to create a new Task in the TaskList Use the rename icon ( ) to rename TaskLists Click and drag on the bars to the left of a Task to reorder the Tasks. Use the pencil (edit) button to edit a task. When you click the edit or \"New <TaskType> Task\" buttons, you'll see something similar to: See FactoryOrchestratorXML for information about the different options on this screen. Use the delete buttons to delete an existing Task. Configure Factory Orchestrator to automatically load TaskLists when it starts Factory Orchestrator looks for certain FactoryOrchestratorXML files when it starts. You can use these FactoryOrchestratorXML files to pre-load tasks into Factory Orchestrator, run tasks the first time a device boots, or run tasks every time a device boots. See Special FactoryOrchestratorXML files for more information. Export TaskLists If you create one or more TaskLists, you can export and save them. This allows you to add them onto another device. From the 'Manage TaskLists\" screen: Save a single TaskList by clicking on the disk icon next to the TaskList name Save all your TaskLists by clicking on the button that says 'Save All TaskLists to XML File` To export TaskLists: Here is an image of the Manage TaskLists page with one TaskList loaded: From this page, you can: Export a specific TaskList by clicking on the save icon (./images/save-icon.png) next to the Task Export all TaskLists by clicking on the Save All TaskLists to File button. After you click one of these buttons, enter the full path of the file to save and click the (\u2713) to confirm. Special FactoryOrchestratorXML files When it starts, the Factory Orchestrator service looks in %DataDrive%\\TestContent for the following FactoryOrchestratorXML files that determine startup behavior: Filename Usage InitialTaskLists.xml These Factory Orchestrator TaskLists are loaded on first boot only. This file defines the default state of Factory Orchestrator, that is the TaskLists & tasks that are shown in the FO UI. FirstBootTasks.xml These TaskLists are run once, on the first boot of the DUT. EveryBootTasks.xml These TaskLists are run on every boot of the DUT, including first boot. On first boot, it is always run after FirstBootTasks. When Factory Orchestrator is running these tasks, you'll see a warning in the Factory Orchestrator UI: Notes : The Factory Orchestrator Service does not allow communication with clients such as the Factory Orchestrator app until any <Tasks> defined in the relevant *BootTasks.xml files are done executing. DO NOT use External or UWP Tasks in these files , as there is no way to mark those Tasks as completed without a connected Factory Orchestrator client. While you can author normal <Tasks> in the *BootTasks.xml files, <BackgroundTasks> are very useful for the FirstBootTasks and EveryBootTasks XML files, as you can define <BackgroundTasks> which start on boot, aren't expected to ever exit, and will run in the background forever (provided TerminateBackgroundTasksOnCompletion=\"false\" ). You can inspect the FactoryOrchestrator log files for details about the execution of these special FactoryOrchestratorXML files. Factory Orchestrator XML Schema When hand-authoring FactoryOrchestratorXML files, you'll need to follow the FactoryOrchestratorXML schema. At the end of this topic, we've also provided a sample FactoryOrchestratorXML file : ```XML <xs:schema id=\"FactoryOrchestratorXML\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" <xs:element name=\"TaskRunGuids\"> <xs:complexType> <xs:sequence> <xs:element name=\"Guid\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> </xs:element> <xs:complexType name=\"TaskType\"> <xs:all> <xs:element name=\"LatestTaskRunTimeStarted\" type=\"xs:dateTime\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunTimeFinished\" type=\"xs:dateTime\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunStatus\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunExitCode\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"TimesRetried\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element ref=\"TaskRunGuids\" minOccurs=\"0\" maxOccurs=\"1\"/> </xs:all> <xs:attribute type=\"xs:string\" name=\"Name\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Path\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Guid\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Arguments\" use=\"optional\"/> <xs:attribute type=\"xs:int\" name=\"MaxNumberOfRetries\" use=\"optional\"/> <xs:attribute type=\"xs:int\" name=\"Timeout\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"AbortTaskListOnFailed\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"AutoPassedIfLaunched\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"TerminateOnCompleted\" use=\"optional\"/> </xs:complexType> <xs:complexType name=\"TasksType\"> <xs:sequence> <xs:element name=\"Task\" type=\"TaskType\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:element name=\"TaskList\"> <xs:complexType> <xs:sequence> <xs:element name=\"Tasks\" type=\"TasksType\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"BackgroundTasks\" type=\"TasksType\" minOccurs=\"0\" maxOccurs=\"1\"/> </xs:sequence> <xs:attribute name=\"Name\" type=\"xs:string\" use=\"required\"/> <xs:attribute name=\"Guid\" type=\"xs:string\" use=\"optional\"/> <xs:attribute name=\"RunInParallel\" type=\"xs:boolean\" use=\"required\"/> <xs:attribute name=\"AllowOtherTaskListsToRun\" type=\"xs:boolean\" use=\"required\"/> <xs:attribute name=\"TerminateBackgroundTasksOnCompletion\" type=\"xs:boolean\" use=\"optional\"/> </xs:complexType> </xs:element> <xs:element name=\"TaskLists\"> <xs:complexType> <xs:sequence> <xs:element ref=\"TaskList\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> </xs:element> <xs:element name=\"FactoryOrchestratorXML\"> <xs:complexType> <xs:sequence> <xs:element ref=\"TaskLists\" minOccurs=\"1\" maxOccurs=\"1\"/> </xs:sequence> </xs:complexType> </xs:element> ``` TaskList attributes A TaskList element defines a Factory Orchestrator TaskList. The following defines that attributes of the TaskList element in the Factory Orchestrator XML schema. Attribute Name Type Required? Details Name String Y The \"friendly name\" of the TaskList. Guid String N The GUID used to identify the TaskList. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded. RunInParallel Bool Y If \"true\", the Tasks in this TaskList are executed in parallel. If \"false\", the Tasks in this TaskList are executed in order, one at a time. AllowOtherTaskListsToRun Bool Y If \"false\", while this TaskList is running all other TaskLists are blocked from executing. If \"true\", other TaskLists may execute while this TaskList is running. TerminateBackgroundTasksOnCompletion Bool N If \"true\", any BackgroundTasks defined in this TaskList are forcibly terminated when the TaskList's Tasks complete. If \"false\", any BackgroundTasks defined in this TaskList continue executing. Defaults to \"true\". Sample TaskList element <TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a6\" Name=\"List2\" RunInParallel=\"true\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\"> Task attributes A Task element defines a Factory Orchestrator Task. Tasks are pass/fail executables, apps, or jobs that are run as part of the TaskList that defines them. The following defines that attributes of the Task element in the Factory Orchestrator XML schema. Attribute Name Type Required? Details xsi:type See details Y The type of the Task. Allowed values are: ExecutableTask, PowerShellTask, BatchFileTask, TAEFTest, UWPTask, and ExternalTask. Name String N The \"friendly name\" of the Task. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded, based on the Task type and other attributes. Guid String N The GUID used to identify the Task. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded. Path String Depends See the Path table below to see which Tasks require you to include a Path element. Arguments String N For Executable, PowerShell, BatchFile, and TAEF Tasks: this is the list of arguments to provide to the executable you specified in the \"Path\". For UWP Tasks: this can be used to provide details about the Task to the client. It is NOT passed to the UWP app. For External Tasks: this can be used to provide details about the Task to the client. Timeout Int N In seconds, the amount of time to wait for the Task to be completed. Defaults to \"-1\" (infinite). If \"-1\", the Task will never timeout. If the timeout is reached, the Task status is set to \"Timeout\", a failed state. The Task's executable is also forcibly terminated (if it has one). MaxNumberOfRetries Int N The number of times the Task should automatically be re-run if it completes in a failed state (Aborted/Failed/Timeout). Defaults to \"0\" (do not retry). For example, if this is set to \"2\", the Task could be run up to 3 times automatically. AbortTaskListOnFailed Bool N If \"true\", if the Task is run during a TaskList and the Task fails (Aborted/Failed/Timeout), the TaskList is aborted in its current state. Any other pending or running Tasks will be aborted. This action takes place after any re-runs specified by MaxNumberOfRetries. While allowed, it is not recommended to use this for \"RunInParallel\" TaskLists, as the execution order of such a TaskList is not guaranteed, and Tasks may be aborted mid-execution. TerminateOnCompleted Bool N By default, an app is terminated when the UWPTask completes. Set to false to not terminate after a UWPTask completes. TerminateOnCompleted is ignored if AutoPassedIfLaunched= true AutoPassedIfLaunched Bool N By default, a UWPTask waits for its TaskRun to be completed by a Factory Orchestrator Client. Setting this to true marks the UWP task completed when the app is launched. Path definitions Task type Required Path definition Executable Yes The path to the executable file that should be executed for this Task. PowerShell Yes The path to the PowerShell file that should be executed for this Task. BatchFile Yes The path to the Batch file that should be executed for this Task. TAEF Yes The path to the TAEF test that should be executed for this Task. UWP Yes the PackageFamilyName of the app you wish to launch. The PackageFamilyName is found in the package.appxmanifest for your app. It is also shown on the Factory Orchestrator app's \"UWP Apps\" page. External No This is optional, but can be used to provide details about the Task. Sample Task element <Task xsi:type=\"ExecutableTask\" Name=\"Exe with abort tasklist on fail\" Path=\"%DataDrive%\\TestContent\\testapp4.exe\" Arguments=\"\" Guid=\"6279616a-345d-4469-bba0-fd019c78b531\" AbortTaskListOnFailed=\"true\"/> Validate Factory Orchestrator XML You can validate FactoryOrchestratorXML using the Factory Orchestrator app on a technician PC. Install the Factory Orchestrator app on a technician PC and launch it. Click \"Validate FactoryOrchestratorXML\" in the bottom left of the app. Browse to the path of your FactoryOrchestratorXML file and click open. The FactoryOrchestratorXML file will be validated against the schema. Because this validation happens on the technician PC, it will only catch XML syntax errors not Factory Orchestrator Service errors such as duplicate GUIDs or invalid file paths. If the FactoryOrchestratorXML is valid you will see a success message saying that \"FactoryOrchestratorXML was successfully validated.\" If the FactoryOrchestratorXML is invalid, you'll see a message that says \"FactoryOrchestratorXML failed validation\", with a description of why it failed validation. Background tasks A Background Task is a type of Task which is not expected to return a pass/fail result. Instead, Background Tasks are started before any Tasks defined in the TaskList, and are not tracked by the Factory Orchestrator Service, though their output is logged to a file. Background Tasks are intended to be used for logging/monitoring tasks that need to be running before any Task in the TaskList executes. Background Tasks are defined as children of the <BackgroundTasks> element. That element can have any number of child <Task> elements which are run as Background Tasks. The TerminateBackgroundTasksOnCompletion attribute on the owning TaskList determines if the Background Tasks are forcibly terminated when the TaskList is done executing. Background Tasks are defined the exactly the same as a normal Task with the following exceptions: Any Executable, PowerShell, or Batch File Task can be made a Background Task. Background Tasks cannot have Timeout or MaxNumberOfRetries set Sample BackgroundTasks element <BackgroundTasks> <Task xsi:type=\"ExecutableTask\" Name=\"Background Monitor\" Path=\"%DataDrive%\\TestContent\\SomeBackgroundProcess.exe\" Arguments=\"\" Guid=\"34d3827c-6397-411f-85a6-7e92dca5f364\"/> </BackgroundTasks> Sample Factory Orchestrator XML file The following sample FactoryOrchestratorXML file shows two TaskLists containing various types of tests, as well as a BackgroundTask that is part of the first TaskList. <?xml version=\"1.0\" encoding=\"utf-8\"?> <FactoryOrchestratorXML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"> <TaskLists> <!-- RunInParallel = all tasks can be executed simultaneously. AllowOtherTaskListsToRun = other tasklists can run in parallel with this one. TerminateBackgroundTasksOnCompletion = Any still running background tasks are forcefully terminated when all tasks complete --> <TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a5\" Name=\"List1\" RunInParallel=\"false\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\"> <Tasks> <!-- When a UWPTask is launched from Factory Orchestrator, the Factory Orchestrator app will prompt the user for the result of the app after it terminates. --> <!-- UWPTasks require Factory Orchestrator app is running! --> <Task xsi:type=\"UWPTask\" Name=\"Launch app directly via FO (exit with ALT+F4)\" Path=\"Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe\" Arguments=\"\" Guid=\"6ec52ded-e455-44cb-b861-b8d78996db95\"/> <Task xsi:type=\"TAEFTest\" Name=\"TAEF test\" Path=\"%DataDrive%\\TestContent\\taeftest1.dll\" Arguments=\"\" Guid=\"ff908b05-e491-4a6e-9305-793b3c2d7f97\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with 5 retries\" Path=\"%DataDrive%\\TestContent\\testapp1.exe\" Arguments=\"\" Guid=\"d75f7c9c-8de9-4d0f-b6dc-d2a51d8818cb\" MaxNumberOfRetries=\"5\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with 10 second timeout\" Path=\"%DataDrive%\\TestContent\\testapp2.exe\" Arguments=\"\" Guid=\"7ffd4516-b092-4f22-beec-f12c814f50dc\" Timeout=\"10\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with arguments\" Path=\"%DataDrive%\\TestContent\\testapp3.exe\" Arguments=\"-arg1 abc -arg2 def\" Guid=\"186e4b74-280f-45ca-a73b-a0b342fa1cb8\" /> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with abort tasklist on fail\" Path=\"%DataDrive%\\TestContent\\testapp4.exe\" Arguments=\"\" Guid=\"6279616a-345d-4469-bba0-fd019c78b531\" AbortTaskListOnFailed=\"true\"/> <Task xsi:type=\"BatchFileTask\" Name=\"Cmd/Batch file with arguments\" Path=\"%DataDrive%\\TestContent\\cmdfile.cmd\" Arguments=\"-arg1 abc\" Guid=\"cf334ad7-4480-4915-b84c-2a38c84b4e8c\"/> <Task xsi:type=\"PowerShellTask\" Name=\"RunAppViaDevicePortal.ps1 (PowerShell Core, exit app with ALT+F4)\" Path=\"%DataDrive%\\TestContent\\RunAppViaDevicePortal.ps1\" Arguments=\"-AppId Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe!App\" Guid=\"1f596b55-7c9b-4e71-97b4-a0c93c098a86\"/> <!-- When a ExternalTask is launched from Factory Orchestrator, the Factory Orchestrator app will prompt the user for the result of task --> <Task xsi:type=\"ExternalTask\" Name=\"External Task (No executable code or app)\" Path=\"User interaction required\" Arguments=\"Plug in power cord\" Guid=\"f90ba40d-4982-46dc-b9a2-c1cd7900fef7\" AbortTaskListOnFailed=\"true\"/> </Tasks> <!-- Background Tasks are started before any other task in the TaskList, they are intended for processes that you want running throughout the entire tasklist, ex: a monitor or logging program --> <!-- BackgroundTasks can be ExecutableTask, BatchFileTask, or PowerShellTask --> <BackgroundTasks> <Task xsi:type=\"ExecutableTask\" Name=\"Background Monitor\" Path=\"%DataDrive%\\TestContent\\SomeBackgroundProcess.exe\" Arguments=\"\" Guid=\"34d3827c-6397-411f-85a6-7e92dca5f364\"/> </BackgroundTasks> </TaskList> <!-- FactoryOrchestratorXML can contain multiple tasklists, so you can define your entire factory flow in one file, if desired. --> <TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a6\" Name=\"List2\" RunInParallel=\"true\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\"> <Tasks> <Task xsi:type=\"ExecutableTask\" Name=\"Exe in another tasklist\" Path=\"%DataDrive%\\TestContent\\testapp5.exe\" Arguments=\"\" Guid=\"45945e43-d251-4c97-a9ad-63cd52b09801\"/> </Tasks> </TaskList> </TaskLists> </FactoryOrchestratorXML>","title":"Tasks & TaskLists"},{"location":"tasks-and-tasklists/#tasks-and-taskslists","text":"Factory Orchestrator uses Tasks to capture a single action. Tasks can be executables, TAEF tests, UWP apps, or external tasks. TasksLists are used to order and group Tasks. Tasks in a TaskList can be configured run in series, parallel, or in the background.","title":"Tasks and TasksLists"},{"location":"tasks-and-tasklists/#factory-orchestrator-tasks","text":"","title":"Factory Orchestrator tasks"},{"location":"tasks-and-tasklists/#task-types","text":"Factory Orchestrator TaskLists allow adding different types of tasks: Executable These tasks are .exe files which are run directly. When you add this type of task, you can specify additional arguments and if the task should run as a background task. Batch File These tasks are .bat or .cmd files which are run by the command prompt (cmd.exe). When you add this type of task, you can specify additional arguments and if the task should run as a background task. PowerShell These tasks are .ps1 files which are run by PowerShell Core (pwsh.exe). When you add this type of task, you can specify additional arguments and if the task should run as a background task. Requires the WCOS_POWERSHELLCORE feature is included in your OEMInput.xml file. TAEF TAEF tests can be added to a TaskList, and you can specify arguments and if the task should run as a background task. UWP App Allows you to run a UWP app as a task. UWP apps cannot take arguments (though you can use arguments to pass info to the operator about the goal of the Task), nor can they automatically return a pass/fail result. Instead, the operator must manually specify if the app passed or failed via a result prompt that the Factory Orchestrator App launches when the UWP app exits. You can also exit apps via ALT+F4 or Windows Device Portal. The Factory Orchestrator service can launch apps even if the Factory Orchestrator app isn't running. UWP App tasks will only run on DUTs booted into an environment that supports UWP apps. External These are tasks that require interaction from a technician before completing. These types of tasks could be used to tell a technician to connect a cable, check a device for scratches, move the device to the next station, etc. External Tasks can't automatically return a pass/fail result. The operator must manually specify if the Task passed or failed via a result prompt that the Factory Orchestrator App launches when the Task executes. External tasks will only run on devices that support displaying graphics. Devices configured to boot into a console that can't display graphics won't display external tasks. The operator must manually specify if the app passed or failed via a result prompt that the Factory Orchestrator App launches when the app exits, like is shown on this screen: External tasks also support displaying custom images or video as part of the task. These images and videos are intended to allow external tasks to convey more information to technicians on the factory floor. When you create an external task, use Arguments to let the operator know what to expect or what actions to take. When you create an external task, use the Image or Video Path: field to specify an image or a video.","title":"Task types"},{"location":"tasks-and-tasklists/#background-tasks","text":"A BackgroundTask is a type of Task which is not expected to return a pass/fail result. Instead, BackgroundTasks are started before any Tasks defined in the TaskList, and are not tracked by the Factory Orchestrator Service, though their output is logged to a file. BackgroundTasks are intended to be used for logging/monitoring tasks that need to be running before any Task in the TaskList executes. BackgroundTasks are defined the exactly the same as a normal Task with the following exceptions: BackgroundTasks can only be an Executable, PowerShell, or BatchFile Task BackgroundTasks cannot have Timeout or MaxNumberOfRetries set When editing a task from the Factory Orchestrator app, you can choose the option of making the task a background task by choosing the \"Add as background task?\" option. Once you've run a task, the Factory Orchestrator service creates a TaskRun that is the output and results of the task, as well as other details about the task such as runtime.","title":"Background tasks"},{"location":"tasks-and-tasklists/#author-and-manage-factory-orchestrator-tasklists","text":"You can define a collection of tasks in a TaskList . Tasks in a TaskList are run in a defined order, and can be a mixture that includes any type of tasks that's supported by Factory Orchestrator. TaskList data persists through reboots. TaskList data is stored and maintained by the Factory Orchestrator service, and doesn't depend on the app being open or running. Factory Orchestrator uses XML files to define TaskLists and their associated Tasks. An XML file can contain one or more TaskLists, each with any number of Tasks. The XML can either be hand-authored; or authored, imported, and/or exported using the Factory Orchestrator app's \"Manage TaskLists\" section. You can get started with Factory Orchestrator by using the Manage TaskLists screen in the Factory Orchestrator app to create a TaskList. TaskLists allow you to create collections of tasks that you use to validate your hardware. The Factory Orchestrator app also allows you to export TaskLists for use on other systems. See Managing TaskLists below.","title":"Author and manage Factory Orchestrator TaskLists"},{"location":"tasks-and-tasklists/#managing-tasklists","text":"Use the Factory Orchestrator app to manage a TaskList. TaskLists can be made up from a combination of the different task types. You can choose whether the tasks in the TaskList will be run one-at-a-time (series), or in parallel. When you run Factory Orchestrator, you're presented with the 'Run TaskLists' tab. If you're opening the app for the first time, the app won't show any TaskLists. Once you create a TaskList, it will show on this screen. Factory Orchestrator supports using environment variables (ex: %ProgramData%) in all commands. To create, modify, and delete TaskLists, click on 'Manage TaskLists'.","title":"Managing TaskLists"},{"location":"tasks-and-tasklists/#create-and-manage-tasklists","text":"The 'Manage TaskLists' tab in the Factory Orchestrator app allows you to create, modify, and delete TaskLists.","title":"Create and manage TaskLists"},{"location":"tasks-and-tasklists/#create-or-import-tasklists","text":"Add a whole folder as a TaskList Adds the contents of a local folder into a new TaskList. After you've added a folder, you can edit individual tasks to configure additional arguments, timeout settings, etc. Choose individual files to add to a TaskList Use Create new TaskList to create a new TaskList where you can individual tasks one-at-a-time to your TaskList. When you add tasks this way, you choose the type of task that you're adding and can configure arguments, timeout settings, etc as you add tasks. Import a previously generated TaskLists XML file This enables you to generate and export a TaskList on one device, and import it into your device. Once loaded, imported TaskList XML files can be modified like any other Task List. To import a TaskList: On the Manage TaskLists page, click on Import FactoryOrchestratorXML file Enter the full path to the FactoryOrchestratorXML you want to import and click \u2713 When you import a TaskList: All the TaskLists defined in the file are imported If the TaskList(s) were previously run, the TaskList state is also imported but not Task run results When you create a new TaskList, the Factory Orchestrator app generates a GUID that it assigns as the TaskList's name.","title":"Create or import TaskLists"},{"location":"tasks-and-tasklists/#create-and-modify-tasklists","text":"Once you've added tasks to a TaskList, you can click the pencil icon to modify as TaskList. When you click the pencil icon, you'll see the following screen: This screen allows you to create new Tasks, rename existing Tasks, reorder Tasks, or edit Tasks. Use the \"New <TaskType> Task\" buttons to create a new Task in the TaskList Use the rename icon ( ) to rename TaskLists Click and drag on the bars to the left of a Task to reorder the Tasks. Use the pencil (edit) button to edit a task. When you click the edit or \"New <TaskType> Task\" buttons, you'll see something similar to: See FactoryOrchestratorXML for information about the different options on this screen. Use the delete buttons to delete an existing Task.","title":"Create and modify TaskLists"},{"location":"tasks-and-tasklists/#configure-factory-orchestrator-to-automatically-load-tasklists-when-it-starts","text":"Factory Orchestrator looks for certain FactoryOrchestratorXML files when it starts. You can use these FactoryOrchestratorXML files to pre-load tasks into Factory Orchestrator, run tasks the first time a device boots, or run tasks every time a device boots. See Special FactoryOrchestratorXML files for more information.","title":"Configure Factory Orchestrator to automatically load TaskLists when it starts"},{"location":"tasks-and-tasklists/#export-tasklists","text":"If you create one or more TaskLists, you can export and save them. This allows you to add them onto another device. From the 'Manage TaskLists\" screen: Save a single TaskList by clicking on the disk icon next to the TaskList name Save all your TaskLists by clicking on the button that says 'Save All TaskLists to XML File` To export TaskLists: Here is an image of the Manage TaskLists page with one TaskList loaded: From this page, you can: Export a specific TaskList by clicking on the save icon (./images/save-icon.png) next to the Task Export all TaskLists by clicking on the Save All TaskLists to File button. After you click one of these buttons, enter the full path of the file to save and click the (\u2713) to confirm.","title":"Export TaskLists"},{"location":"tasks-and-tasklists/#special-factoryorchestratorxml-files","text":"When it starts, the Factory Orchestrator service looks in %DataDrive%\\TestContent for the following FactoryOrchestratorXML files that determine startup behavior: Filename Usage InitialTaskLists.xml These Factory Orchestrator TaskLists are loaded on first boot only. This file defines the default state of Factory Orchestrator, that is the TaskLists & tasks that are shown in the FO UI. FirstBootTasks.xml These TaskLists are run once, on the first boot of the DUT. EveryBootTasks.xml These TaskLists are run on every boot of the DUT, including first boot. On first boot, it is always run after FirstBootTasks. When Factory Orchestrator is running these tasks, you'll see a warning in the Factory Orchestrator UI: Notes : The Factory Orchestrator Service does not allow communication with clients such as the Factory Orchestrator app until any <Tasks> defined in the relevant *BootTasks.xml files are done executing. DO NOT use External or UWP Tasks in these files , as there is no way to mark those Tasks as completed without a connected Factory Orchestrator client. While you can author normal <Tasks> in the *BootTasks.xml files, <BackgroundTasks> are very useful for the FirstBootTasks and EveryBootTasks XML files, as you can define <BackgroundTasks> which start on boot, aren't expected to ever exit, and will run in the background forever (provided TerminateBackgroundTasksOnCompletion=\"false\" ). You can inspect the FactoryOrchestrator log files for details about the execution of these special FactoryOrchestratorXML files.","title":"Special FactoryOrchestratorXML files"},{"location":"tasks-and-tasklists/#factory-orchestrator-xml-schema","text":"When hand-authoring FactoryOrchestratorXML files, you'll need to follow the FactoryOrchestratorXML schema. At the end of this topic, we've also provided a sample FactoryOrchestratorXML file : ```XML <xs:schema id=\"FactoryOrchestratorXML\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" <xs:element name=\"TaskRunGuids\"> <xs:complexType> <xs:sequence> <xs:element name=\"Guid\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> </xs:element> <xs:complexType name=\"TaskType\"> <xs:all> <xs:element name=\"LatestTaskRunTimeStarted\" type=\"xs:dateTime\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunTimeFinished\" type=\"xs:dateTime\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunStatus\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"LatestTaskRunExitCode\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"TimesRetried\" type=\"xs:int\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element ref=\"TaskRunGuids\" minOccurs=\"0\" maxOccurs=\"1\"/> </xs:all> <xs:attribute type=\"xs:string\" name=\"Name\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Path\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Guid\" use=\"optional\"/> <xs:attribute type=\"xs:string\" name=\"Arguments\" use=\"optional\"/> <xs:attribute type=\"xs:int\" name=\"MaxNumberOfRetries\" use=\"optional\"/> <xs:attribute type=\"xs:int\" name=\"Timeout\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"AbortTaskListOnFailed\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"AutoPassedIfLaunched\" use=\"optional\"/> <xs:attribute type=\"xs:boolean\" name=\"TerminateOnCompleted\" use=\"optional\"/> </xs:complexType> <xs:complexType name=\"TasksType\"> <xs:sequence> <xs:element name=\"Task\" type=\"TaskType\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:element name=\"TaskList\"> <xs:complexType> <xs:sequence> <xs:element name=\"Tasks\" type=\"TasksType\" minOccurs=\"0\" maxOccurs=\"1\"/> <xs:element name=\"BackgroundTasks\" type=\"TasksType\" minOccurs=\"0\" maxOccurs=\"1\"/> </xs:sequence> <xs:attribute name=\"Name\" type=\"xs:string\" use=\"required\"/> <xs:attribute name=\"Guid\" type=\"xs:string\" use=\"optional\"/> <xs:attribute name=\"RunInParallel\" type=\"xs:boolean\" use=\"required\"/> <xs:attribute name=\"AllowOtherTaskListsToRun\" type=\"xs:boolean\" use=\"required\"/> <xs:attribute name=\"TerminateBackgroundTasksOnCompletion\" type=\"xs:boolean\" use=\"optional\"/> </xs:complexType> </xs:element> <xs:element name=\"TaskLists\"> <xs:complexType> <xs:sequence> <xs:element ref=\"TaskList\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> </xs:element> <xs:element name=\"FactoryOrchestratorXML\"> <xs:complexType> <xs:sequence> <xs:element ref=\"TaskLists\" minOccurs=\"1\" maxOccurs=\"1\"/> </xs:sequence> </xs:complexType> </xs:element> ```","title":"Factory Orchestrator XML Schema"},{"location":"tasks-and-tasklists/#tasklist-attributes","text":"A TaskList element defines a Factory Orchestrator TaskList. The following defines that attributes of the TaskList element in the Factory Orchestrator XML schema. Attribute Name Type Required? Details Name String Y The \"friendly name\" of the TaskList. Guid String N The GUID used to identify the TaskList. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded. RunInParallel Bool Y If \"true\", the Tasks in this TaskList are executed in parallel. If \"false\", the Tasks in this TaskList are executed in order, one at a time. AllowOtherTaskListsToRun Bool Y If \"false\", while this TaskList is running all other TaskLists are blocked from executing. If \"true\", other TaskLists may execute while this TaskList is running. TerminateBackgroundTasksOnCompletion Bool N If \"true\", any BackgroundTasks defined in this TaskList are forcibly terminated when the TaskList's Tasks complete. If \"false\", any BackgroundTasks defined in this TaskList continue executing. Defaults to \"true\".","title":"TaskList attributes"},{"location":"tasks-and-tasklists/#sample-tasklist-element","text":"<TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a6\" Name=\"List2\" RunInParallel=\"true\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\">","title":"Sample TaskList element"},{"location":"tasks-and-tasklists/#task-attributes","text":"A Task element defines a Factory Orchestrator Task. Tasks are pass/fail executables, apps, or jobs that are run as part of the TaskList that defines them. The following defines that attributes of the Task element in the Factory Orchestrator XML schema. Attribute Name Type Required? Details xsi:type See details Y The type of the Task. Allowed values are: ExecutableTask, PowerShellTask, BatchFileTask, TAEFTest, UWPTask, and ExternalTask. Name String N The \"friendly name\" of the Task. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded, based on the Task type and other attributes. Guid String N The GUID used to identify the Task. If not set, it will be assigned by the Factory Orchestrator Service automatically when the FactoryOrchestratorXML is loaded. Path String Depends See the Path table below to see which Tasks require you to include a Path element. Arguments String N For Executable, PowerShell, BatchFile, and TAEF Tasks: this is the list of arguments to provide to the executable you specified in the \"Path\". For UWP Tasks: this can be used to provide details about the Task to the client. It is NOT passed to the UWP app. For External Tasks: this can be used to provide details about the Task to the client. Timeout Int N In seconds, the amount of time to wait for the Task to be completed. Defaults to \"-1\" (infinite). If \"-1\", the Task will never timeout. If the timeout is reached, the Task status is set to \"Timeout\", a failed state. The Task's executable is also forcibly terminated (if it has one). MaxNumberOfRetries Int N The number of times the Task should automatically be re-run if it completes in a failed state (Aborted/Failed/Timeout). Defaults to \"0\" (do not retry). For example, if this is set to \"2\", the Task could be run up to 3 times automatically. AbortTaskListOnFailed Bool N If \"true\", if the Task is run during a TaskList and the Task fails (Aborted/Failed/Timeout), the TaskList is aborted in its current state. Any other pending or running Tasks will be aborted. This action takes place after any re-runs specified by MaxNumberOfRetries. While allowed, it is not recommended to use this for \"RunInParallel\" TaskLists, as the execution order of such a TaskList is not guaranteed, and Tasks may be aborted mid-execution. TerminateOnCompleted Bool N By default, an app is terminated when the UWPTask completes. Set to false to not terminate after a UWPTask completes. TerminateOnCompleted is ignored if AutoPassedIfLaunched= true AutoPassedIfLaunched Bool N By default, a UWPTask waits for its TaskRun to be completed by a Factory Orchestrator Client. Setting this to true marks the UWP task completed when the app is launched.","title":"Task attributes"},{"location":"tasks-and-tasklists/#path-definitions","text":"Task type Required Path definition Executable Yes The path to the executable file that should be executed for this Task. PowerShell Yes The path to the PowerShell file that should be executed for this Task. BatchFile Yes The path to the Batch file that should be executed for this Task. TAEF Yes The path to the TAEF test that should be executed for this Task. UWP Yes the PackageFamilyName of the app you wish to launch. The PackageFamilyName is found in the package.appxmanifest for your app. It is also shown on the Factory Orchestrator app's \"UWP Apps\" page. External No This is optional, but can be used to provide details about the Task.","title":"Path definitions"},{"location":"tasks-and-tasklists/#sample-task-element","text":"<Task xsi:type=\"ExecutableTask\" Name=\"Exe with abort tasklist on fail\" Path=\"%DataDrive%\\TestContent\\testapp4.exe\" Arguments=\"\" Guid=\"6279616a-345d-4469-bba0-fd019c78b531\" AbortTaskListOnFailed=\"true\"/>","title":"Sample Task element"},{"location":"tasks-and-tasklists/#validate-factory-orchestrator-xml","text":"You can validate FactoryOrchestratorXML using the Factory Orchestrator app on a technician PC. Install the Factory Orchestrator app on a technician PC and launch it. Click \"Validate FactoryOrchestratorXML\" in the bottom left of the app. Browse to the path of your FactoryOrchestratorXML file and click open. The FactoryOrchestratorXML file will be validated against the schema. Because this validation happens on the technician PC, it will only catch XML syntax errors not Factory Orchestrator Service errors such as duplicate GUIDs or invalid file paths. If the FactoryOrchestratorXML is valid you will see a success message saying that \"FactoryOrchestratorXML was successfully validated.\" If the FactoryOrchestratorXML is invalid, you'll see a message that says \"FactoryOrchestratorXML failed validation\", with a description of why it failed validation.","title":"Validate Factory Orchestrator XML"},{"location":"tasks-and-tasklists/#background-tasks_1","text":"A Background Task is a type of Task which is not expected to return a pass/fail result. Instead, Background Tasks are started before any Tasks defined in the TaskList, and are not tracked by the Factory Orchestrator Service, though their output is logged to a file. Background Tasks are intended to be used for logging/monitoring tasks that need to be running before any Task in the TaskList executes. Background Tasks are defined as children of the <BackgroundTasks> element. That element can have any number of child <Task> elements which are run as Background Tasks. The TerminateBackgroundTasksOnCompletion attribute on the owning TaskList determines if the Background Tasks are forcibly terminated when the TaskList is done executing. Background Tasks are defined the exactly the same as a normal Task with the following exceptions: Any Executable, PowerShell, or Batch File Task can be made a Background Task. Background Tasks cannot have Timeout or MaxNumberOfRetries set","title":"Background tasks"},{"location":"tasks-and-tasklists/#sample-backgroundtasks-element","text":"<BackgroundTasks> <Task xsi:type=\"ExecutableTask\" Name=\"Background Monitor\" Path=\"%DataDrive%\\TestContent\\SomeBackgroundProcess.exe\" Arguments=\"\" Guid=\"34d3827c-6397-411f-85a6-7e92dca5f364\"/> </BackgroundTasks>","title":"Sample BackgroundTasks element"},{"location":"tasks-and-tasklists/#sample-factory-orchestrator-xml-file","text":"The following sample FactoryOrchestratorXML file shows two TaskLists containing various types of tests, as well as a BackgroundTask that is part of the first TaskList. <?xml version=\"1.0\" encoding=\"utf-8\"?> <FactoryOrchestratorXML xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"> <TaskLists> <!-- RunInParallel = all tasks can be executed simultaneously. AllowOtherTaskListsToRun = other tasklists can run in parallel with this one. TerminateBackgroundTasksOnCompletion = Any still running background tasks are forcefully terminated when all tasks complete --> <TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a5\" Name=\"List1\" RunInParallel=\"false\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\"> <Tasks> <!-- When a UWPTask is launched from Factory Orchestrator, the Factory Orchestrator app will prompt the user for the result of the app after it terminates. --> <!-- UWPTasks require Factory Orchestrator app is running! --> <Task xsi:type=\"UWPTask\" Name=\"Launch app directly via FO (exit with ALT+F4)\" Path=\"Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe\" Arguments=\"\" Guid=\"6ec52ded-e455-44cb-b861-b8d78996db95\"/> <Task xsi:type=\"TAEFTest\" Name=\"TAEF test\" Path=\"%DataDrive%\\TestContent\\taeftest1.dll\" Arguments=\"\" Guid=\"ff908b05-e491-4a6e-9305-793b3c2d7f97\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with 5 retries\" Path=\"%DataDrive%\\TestContent\\testapp1.exe\" Arguments=\"\" Guid=\"d75f7c9c-8de9-4d0f-b6dc-d2a51d8818cb\" MaxNumberOfRetries=\"5\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with 10 second timeout\" Path=\"%DataDrive%\\TestContent\\testapp2.exe\" Arguments=\"\" Guid=\"7ffd4516-b092-4f22-beec-f12c814f50dc\" Timeout=\"10\"/> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with arguments\" Path=\"%DataDrive%\\TestContent\\testapp3.exe\" Arguments=\"-arg1 abc -arg2 def\" Guid=\"186e4b74-280f-45ca-a73b-a0b342fa1cb8\" /> <Task xsi:type=\"ExecutableTask\" Name=\"Exe with abort tasklist on fail\" Path=\"%DataDrive%\\TestContent\\testapp4.exe\" Arguments=\"\" Guid=\"6279616a-345d-4469-bba0-fd019c78b531\" AbortTaskListOnFailed=\"true\"/> <Task xsi:type=\"BatchFileTask\" Name=\"Cmd/Batch file with arguments\" Path=\"%DataDrive%\\TestContent\\cmdfile.cmd\" Arguments=\"-arg1 abc\" Guid=\"cf334ad7-4480-4915-b84c-2a38c84b4e8c\"/> <Task xsi:type=\"PowerShellTask\" Name=\"RunAppViaDevicePortal.ps1 (PowerShell Core, exit app with ALT+F4)\" Path=\"%DataDrive%\\TestContent\\RunAppViaDevicePortal.ps1\" Arguments=\"-AppId Microsoft.FactoryOrchestratorApp_8wekyb3d8bbwe!App\" Guid=\"1f596b55-7c9b-4e71-97b4-a0c93c098a86\"/> <!-- When a ExternalTask is launched from Factory Orchestrator, the Factory Orchestrator app will prompt the user for the result of task --> <Task xsi:type=\"ExternalTask\" Name=\"External Task (No executable code or app)\" Path=\"User interaction required\" Arguments=\"Plug in power cord\" Guid=\"f90ba40d-4982-46dc-b9a2-c1cd7900fef7\" AbortTaskListOnFailed=\"true\"/> </Tasks> <!-- Background Tasks are started before any other task in the TaskList, they are intended for processes that you want running throughout the entire tasklist, ex: a monitor or logging program --> <!-- BackgroundTasks can be ExecutableTask, BatchFileTask, or PowerShellTask --> <BackgroundTasks> <Task xsi:type=\"ExecutableTask\" Name=\"Background Monitor\" Path=\"%DataDrive%\\TestContent\\SomeBackgroundProcess.exe\" Arguments=\"\" Guid=\"34d3827c-6397-411f-85a6-7e92dca5f364\"/> </BackgroundTasks> </TaskList> <!-- FactoryOrchestratorXML can contain multiple tasklists, so you can define your entire factory flow in one file, if desired. --> <TaskList Guid=\"15332a4b-ee08-4c97-a7ad-d69d4210c3a6\" Name=\"List2\" RunInParallel=\"true\" AllowOtherTaskListsToRun=\"true\" TerminateBackgroundTasksOnCompletion=\"true\"> <Tasks> <Task xsi:type=\"ExecutableTask\" Name=\"Exe in another tasklist\" Path=\"%DataDrive%\\TestContent\\testapp5.exe\" Arguments=\"\" Guid=\"45945e43-d251-4c97-a9ad-63cd52b09801\"/> </Tasks> </TaskList> </TaskLists> </FactoryOrchestratorXML>","title":"Sample Factory Orchestrator XML file"},{"location":"use-the-factory-orchestrator-api/","text":"Using the Factory Orchestrator client API The Factory Orchestrator service, FactoryOrchestratorService.exe, provides a robust API surface for clients to interact with test devices via .NET Standard code. You can use these APIs to author advanced task orchestration code to programmatically interact with the service outside of what the app provides. All FactoryOrchestratorClient API calls other than Connect() are asynchronous . The FactoryOrchestator service uses semver versioning. If the target device is running a different Factory Orchestrator build than one used to create the client program, you need to ensure that the program you build will run as expected by calling Client.GetServiceVersionString() and comparaing against the client API version. If there is a major version mismatch your program may not work as expected and either the client program or test device should be updated so the major versions match. You can check the version of the client API by: Manually inspecting the properties of the FactoryOrchestratorClientLibrary.dll file used by your program Programatically by the following code snippet: using System.Reflection; ... var client = new FactoryOrchestratorClient(ipAddress); client.GetClientVersionString(); If you are writing a UWP app that uses the Factory Orchestrator Client API, you should use the FactoryOrchestratorUWPClient class instead of FactoryOrchestratorClient. The FactoryOrchestratorUWPClient APIs are identical to the FactoryOrchestratorClient APIs. The UWP Client is available in FactoryOrchestratorUWPClientLibrary.dll. The complete Factory Orchestrator Client API reference is available at: FactoryOrchestrator\\Documentation\\api\\index.html . Using FactoryOrchestratorUWPClient.dll in a UWP If you're using FactoryOrchestratorUWPClient.dll in a UWP, you have to configure Visual Studio so that it doesn't build with .NET Native. Load your app project in visual studio. Right click the app project and select Properties : On the Build tab, select All Configurations and All Platforms : Uncheck Compile with .NET Native tool chain Rebuild and re-publish your app. The app dependencies will be different for your newly built app, so you'll need to install different framework packages with your app; After building without the .NET native tool chain, your app should run successfully. Factory Orchestrator client sample A sample .NET Core program that communicates with the Factory Orchestrator service is available in the Faactory Orchestrator GitHub repo at: <Link to sample app> . Copy the entire directory to your technician PC, then open ClientSample.csproj in Visual Studio 2019. (Visual Studio 2019 is required for working with NET Core 2.2 and newer.) The sample shows you how to connect to a remote test device running Factory Orchestrator service, copy files to that device, execute test content, and retrieve the test results from the device both using an API and by retreiving the log files. Factory Orchestrator client sample usage Once the sample is built, create a folder on your technican PC with test content and a FactoryOrchestratorXML file that references the test content in the location it will execute from on the test device. Then, run the sample by calling: dotnet ClientSample.dll <IP Address of DUT> <Folder on technician PC with test content AND FactoryOrchestratorXML files> <Destination folder on DUT> <Destination folder on this PC to save logs> The sample will then connect to the test device, copy files to that device, execute test content, and retrieve the test results from the device both using an API and by retreiving the log files. You will be able to monitor the progress of the sample in the console window, on the DUT (if it is running the Factory Orchestrator app), and on the Factory Orchestrator app on the Technician PC (if it is connected to the test device).","title":"Run using the client api"},{"location":"use-the-factory-orchestrator-api/#using-the-factory-orchestrator-client-api","text":"The Factory Orchestrator service, FactoryOrchestratorService.exe, provides a robust API surface for clients to interact with test devices via .NET Standard code. You can use these APIs to author advanced task orchestration code to programmatically interact with the service outside of what the app provides. All FactoryOrchestratorClient API calls other than Connect() are asynchronous . The FactoryOrchestator service uses semver versioning. If the target device is running a different Factory Orchestrator build than one used to create the client program, you need to ensure that the program you build will run as expected by calling Client.GetServiceVersionString() and comparaing against the client API version. If there is a major version mismatch your program may not work as expected and either the client program or test device should be updated so the major versions match. You can check the version of the client API by: Manually inspecting the properties of the FactoryOrchestratorClientLibrary.dll file used by your program Programatically by the following code snippet: using System.Reflection; ... var client = new FactoryOrchestratorClient(ipAddress); client.GetClientVersionString(); If you are writing a UWP app that uses the Factory Orchestrator Client API, you should use the FactoryOrchestratorUWPClient class instead of FactoryOrchestratorClient. The FactoryOrchestratorUWPClient APIs are identical to the FactoryOrchestratorClient APIs. The UWP Client is available in FactoryOrchestratorUWPClientLibrary.dll. The complete Factory Orchestrator Client API reference is available at: FactoryOrchestrator\\Documentation\\api\\index.html .","title":"Using the Factory Orchestrator client API"},{"location":"use-the-factory-orchestrator-api/#using-factoryorchestratoruwpclientdll-in-a-uwp","text":"If you're using FactoryOrchestratorUWPClient.dll in a UWP, you have to configure Visual Studio so that it doesn't build with .NET Native. Load your app project in visual studio. Right click the app project and select Properties : On the Build tab, select All Configurations and All Platforms : Uncheck Compile with .NET Native tool chain Rebuild and re-publish your app. The app dependencies will be different for your newly built app, so you'll need to install different framework packages with your app; After building without the .NET native tool chain, your app should run successfully.","title":"Using FactoryOrchestratorUWPClient.dll in a UWP"},{"location":"use-the-factory-orchestrator-api/#factory-orchestrator-client-sample","text":"A sample .NET Core program that communicates with the Factory Orchestrator service is available in the Faactory Orchestrator GitHub repo at: <Link to sample app> . Copy the entire directory to your technician PC, then open ClientSample.csproj in Visual Studio 2019. (Visual Studio 2019 is required for working with NET Core 2.2 and newer.) The sample shows you how to connect to a remote test device running Factory Orchestrator service, copy files to that device, execute test content, and retrieve the test results from the device both using an API and by retreiving the log files.","title":"Factory Orchestrator client sample"},{"location":"use-the-factory-orchestrator-api/#factory-orchestrator-client-sample-usage","text":"Once the sample is built, create a folder on your technican PC with test content and a FactoryOrchestratorXML file that references the test content in the location it will execute from on the test device. Then, run the sample by calling: dotnet ClientSample.dll <IP Address of DUT> <Folder on technician PC with test content AND FactoryOrchestratorXML files> <Destination folder on DUT> <Destination folder on this PC to save logs> The sample will then connect to the test device, copy files to that device, execute test content, and retrieve the test results from the device both using an API and by retreiving the log files. You will be able to monitor the progress of the sample in the console window, on the DUT (if it is running the Factory Orchestrator app), and on the Factory Orchestrator app on the Technician PC (if it is connected to the test device).","title":"Factory Orchestrator client sample usage"},{"location":"use-the-factory-orchestrator-app/","text":"Run tasks with Factory Orchestrator Once you've created or imported a TaskList into Factory Orchestrator, you can run it. This topic covers the process of running a TaskList. Run a TaskList When you click on the Run TaskLists menu item, you'll be see the \"Run TaskLists\" screen. Hit the 'Play' button to run a TaskList. As tasks complete, the tasks' output will show next to the task. While a TaskList is running, the Factory Orchestrator service will continue to run the tasks, even if you close the Factory Orchestrator app. If you're running a task or a tasklist, the Factory Orchestrator UI allows you to easily monitor the status of any running task by displaying task status. You can disable this task status display by going to the Run TaskLists page and unchecking Track Execution . As tasks complete, the Tasks' output will show next to the Task. While a TaskList is running, the Factory Orchestrator service will continue to run the tasks, even if you close the Factory Orchestrator app. A running TaskList can be \"Aborted\" by clicking the 'Pause' button. If a TaskList is aborted you can either click the 'Play' button to resume executing it or the 'Re-run' button to restart the TaskList from the beginning. A 'Re-run' button will also appear next to a Task if the TaskList is done executing and that Task failed. Press that button to retry the failed Task. If you click on a Task, the results page will load and show you the status of the latest \"run\" (TaskRun) of that Task, including the any output of the Task. The results page also allows you to see the log file path for that run. You can also use the buttons at the top of the page to view older or newer runs of the Task, provided it has been run multiple times.","title":"Run using the application"},{"location":"use-the-factory-orchestrator-app/#run-tasks-with-factory-orchestrator","text":"Once you've created or imported a TaskList into Factory Orchestrator, you can run it. This topic covers the process of running a TaskList.","title":"Run tasks with Factory Orchestrator"},{"location":"use-the-factory-orchestrator-app/#run-a-tasklist","text":"When you click on the Run TaskLists menu item, you'll be see the \"Run TaskLists\" screen. Hit the 'Play' button to run a TaskList. As tasks complete, the tasks' output will show next to the task. While a TaskList is running, the Factory Orchestrator service will continue to run the tasks, even if you close the Factory Orchestrator app. If you're running a task or a tasklist, the Factory Orchestrator UI allows you to easily monitor the status of any running task by displaying task status. You can disable this task status display by going to the Run TaskLists page and unchecking Track Execution . As tasks complete, the Tasks' output will show next to the Task. While a TaskList is running, the Factory Orchestrator service will continue to run the tasks, even if you close the Factory Orchestrator app. A running TaskList can be \"Aborted\" by clicking the 'Pause' button. If a TaskList is aborted you can either click the 'Play' button to resume executing it or the 'Re-run' button to restart the TaskList from the beginning. A 'Re-run' button will also appear next to a Task if the TaskList is done executing and that Task failed. Press that button to retry the failed Task. If you click on a Task, the results page will load and show you the status of the latest \"run\" (TaskRun) of that Task, including the any output of the Task. The results page also allows you to see the log file path for that run. You can also use the buttons at the top of the page to view older or newer runs of the Task, provided it has been run multiple times.","title":"Run a TaskList"}]}